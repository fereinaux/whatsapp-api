"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _stream = require("stream");

var _bufferutils = _interopRequireDefault(require("../../util/bufferutils"));

function generateRandomData(length) {
  const characters =
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let randomData = '';
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    randomData += characters.charAt(randomIndex);
  }
  return randomData;
}

describe('Utils Functions', function () {
  describe('Buffer to Stream', function () {
    const bodyToBuffer = generateRandomData(100);
    const buffer = Buffer.from(bodyToBuffer, 'utf-8');

    it('Should transform the Buffer in a Readable Stream', function () {
      const bufferStream = _bufferutils.default.bufferToReadableStream(buffer);

      // Assert that the bufferStream is a Readable stream
      expect(bufferStream).toBeInstanceOf(_stream.Readable);
    });

    it('Should, on data end, checks if the Stream are correct', function () {
      const bufferStream = _bufferutils.default.bufferToReadableStream(buffer);

      let data = '';

      bufferStream.on('data', (chunck) => {
        data += chunck.toString('utf-8');
      });

      bufferStream.on('end', () => {
        expect(data).toStrictEqual(bodyToBuffer);
      });
    });
  });

  describe('Async Buffer to Stream', function () {
    const bodyToBuffer = generateRandomData(10000000);
    const buffer = Buffer.from(bodyToBuffer, 'utf-8');

    it('Should await the Buffer convertion and return a instance of readable', async function () {
      const bufferStream = await _bufferutils.default.AsyncBufferToStream(buffer);

      expect(bufferStream).toBeInstanceOf(_stream.Readable);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyZWFtIiwicmVxdWlyZSIsIl9idWZmZXJ1dGlscyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJnZW5lcmF0ZVJhbmRvbURhdGEiLCJsZW5ndGgiLCJjaGFyYWN0ZXJzIiwicmFuZG9tRGF0YSIsImkiLCJyYW5kb21JbmRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImNoYXJBdCIsImRlc2NyaWJlIiwiYm9keVRvQnVmZmVyIiwiYnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsIml0IiwiYnVmZmVyU3RyZWFtIiwiYnVmZmVyVXRpbHMiLCJidWZmZXJUb1JlYWRhYmxlU3RyZWFtIiwiZXhwZWN0IiwidG9CZUluc3RhbmNlT2YiLCJSZWFkYWJsZSIsImRhdGEiLCJvbiIsImNodW5jayIsInRvU3RyaW5nIiwidG9TdHJpY3RFcXVhbCIsIkFzeW5jQnVmZmVyVG9TdHJlYW0iXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdHMvdXRpbC9idWZmZXJVdGlscy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcclxuXHJcbmltcG9ydCBidWZmZXJVdGlscyBmcm9tICcuLi8uLi91dGlsL2J1ZmZlcnV0aWxzJztcclxuXHJcbmZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tRGF0YShsZW5ndGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgY29uc3QgY2hhcmFjdGVycyA9XHJcbiAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG4gIGxldCByYW5kb21EYXRhID0gJyc7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzLmxlbmd0aCk7XHJcbiAgICByYW5kb21EYXRhICs9IGNoYXJhY3RlcnMuY2hhckF0KHJhbmRvbUluZGV4KTtcclxuICB9XHJcbiAgcmV0dXJuIHJhbmRvbURhdGE7XHJcbn1cclxuXHJcbmRlc2NyaWJlKCdVdGlscyBGdW5jdGlvbnMnLCBmdW5jdGlvbiAoKSB7XHJcbiAgZGVzY3JpYmUoJ0J1ZmZlciB0byBTdHJlYW0nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBib2R5VG9CdWZmZXIgPSBnZW5lcmF0ZVJhbmRvbURhdGEoMTAwKTtcclxuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJvZHlUb0J1ZmZlciwgJ3V0Zi04Jyk7XHJcblxyXG4gICAgaXQoJ1Nob3VsZCB0cmFuc2Zvcm0gdGhlIEJ1ZmZlciBpbiBhIFJlYWRhYmxlIFN0cmVhbScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgYnVmZmVyU3RyZWFtID0gYnVmZmVyVXRpbHMuYnVmZmVyVG9SZWFkYWJsZVN0cmVhbShidWZmZXIpO1xyXG5cclxuICAgICAgLy8gQXNzZXJ0IHRoYXQgdGhlIGJ1ZmZlclN0cmVhbSBpcyBhIFJlYWRhYmxlIHN0cmVhbVxyXG4gICAgICBleHBlY3QoYnVmZmVyU3RyZWFtKS50b0JlSW5zdGFuY2VPZihSZWFkYWJsZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnU2hvdWxkLCBvbiBkYXRhIGVuZCwgY2hlY2tzIGlmIHRoZSBTdHJlYW0gYXJlIGNvcnJlY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IGJ1ZmZlclN0cmVhbSA9IGJ1ZmZlclV0aWxzLmJ1ZmZlclRvUmVhZGFibGVTdHJlYW0oYnVmZmVyKTtcclxuXHJcbiAgICAgIGxldCBkYXRhID0gJyc7XHJcblxyXG4gICAgICBidWZmZXJTdHJlYW0ub24oJ2RhdGEnLCAoY2h1bmNrKSA9PiB7XHJcbiAgICAgICAgZGF0YSArPSBjaHVuY2sudG9TdHJpbmcoJ3V0Zi04Jyk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYnVmZmVyU3RyZWFtLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KGRhdGEpLnRvU3RyaWN0RXF1YWwoYm9keVRvQnVmZmVyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ0FzeW5jIEJ1ZmZlciB0byBTdHJlYW0nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBjb25zdCBib2R5VG9CdWZmZXIgPSBnZW5lcmF0ZVJhbmRvbURhdGEoMTAwMDAwMDApO1xyXG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oYm9keVRvQnVmZmVyLCAndXRmLTgnKTtcclxuXHJcbiAgICBpdCgnU2hvdWxkIGF3YWl0IHRoZSBCdWZmZXIgY29udmVydGlvbiBhbmQgcmV0dXJuIGEgaW5zdGFuY2Ugb2YgcmVhZGFibGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IGJ1ZmZlclN0cmVhbSA9IGF3YWl0IGJ1ZmZlclV0aWxzLkFzeW5jQnVmZmVyVG9TdHJlYW0oYnVmZmVyKTtcclxuXHJcbiAgICAgIGV4cGVjdChidWZmZXJTdHJlYW0pLnRvQmVJbnN0YW5jZU9mKFJlYWRhYmxlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoia0dBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBOztBQUVBLElBQUFDLFlBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTs7QUFFQSxTQUFTRyxrQkFBa0JBLENBQUNDLE1BQWMsRUFBVTtFQUNsRCxNQUFNQyxVQUFVO0VBQ2QsZ0VBQWdFO0VBQ2xFLElBQUlDLFVBQVUsR0FBRyxFQUFFO0VBQ25CLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHSCxNQUFNLEVBQUVHLENBQUMsRUFBRSxFQUFFO0lBQy9CLE1BQU1DLFdBQVcsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUNELElBQUksQ0FBQ0UsTUFBTSxDQUFDLENBQUMsR0FBR04sVUFBVSxDQUFDRCxNQUFNLENBQUM7SUFDakVFLFVBQVUsSUFBSUQsVUFBVSxDQUFDTyxNQUFNLENBQUNKLFdBQVcsQ0FBQztFQUM5QztFQUNBLE9BQU9GLFVBQVU7QUFDbkI7O0FBRUFPLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFZO0VBQ3RDQSxRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBWTtJQUN2QyxNQUFNQyxZQUFZLEdBQUdYLGtCQUFrQixDQUFDLEdBQUcsQ0FBQztJQUM1QyxNQUFNWSxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxZQUFZLEVBQUUsT0FBTyxDQUFDOztJQUVqREksRUFBRSxDQUFDLGtEQUFrRCxFQUFFLFlBQVk7TUFDakUsTUFBTUMsWUFBWSxHQUFHQyxvQkFBVyxDQUFDQyxzQkFBc0IsQ0FBQ04sTUFBTSxDQUFDOztNQUUvRDtNQUNBTyxNQUFNLENBQUNILFlBQVksQ0FBQyxDQUFDSSxjQUFjLENBQUNDLGdCQUFRLENBQUM7SUFDL0MsQ0FBQyxDQUFDOztJQUVGTixFQUFFLENBQUMsdURBQXVELEVBQUUsWUFBWTtNQUN0RSxNQUFNQyxZQUFZLEdBQUdDLG9CQUFXLENBQUNDLHNCQUFzQixDQUFDTixNQUFNLENBQUM7O01BRS9ELElBQUlVLElBQUksR0FBRyxFQUFFOztNQUViTixZQUFZLENBQUNPLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQ0MsTUFBTSxLQUFLO1FBQ2xDRixJQUFJLElBQUlFLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLE9BQU8sQ0FBQztNQUNsQyxDQUFDLENBQUM7O01BRUZULFlBQVksQ0FBQ08sRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNO1FBQzNCSixNQUFNLENBQUNHLElBQUksQ0FBQyxDQUFDSSxhQUFhLENBQUNmLFlBQVksQ0FBQztNQUMxQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7O0VBRUZELFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxZQUFZO0lBQzdDLE1BQU1DLFlBQVksR0FBR1gsa0JBQWtCLENBQUMsUUFBUSxDQUFDO0lBQ2pELE1BQU1ZLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNILFlBQVksRUFBRSxPQUFPLENBQUM7O0lBRWpESSxFQUFFLENBQUMsc0VBQXNFLEVBQUUsa0JBQWtCO01BQzNGLE1BQU1DLFlBQVksR0FBRyxNQUFNQyxvQkFBVyxDQUFDVSxtQkFBbUIsQ0FBQ2YsTUFBTSxDQUFDOztNQUVsRU8sTUFBTSxDQUFDSCxZQUFZLENBQUMsQ0FBQ0ksY0FBYyxDQUFDQyxnQkFBUSxDQUFDO0lBQy9DLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==