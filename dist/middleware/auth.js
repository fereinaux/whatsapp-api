"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;














var _bcrypt = _interopRequireDefault(require("bcrypt"));


var _sessionUtil = require("../util/sessionUtil"); /*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function formatSession(session) {return session.split(':')[0];}const verifyToken = (req, res, next) => {const secureToken = req.serverOptions.secretKey;const { session } = req.params;const { authorization: token } = req.headers;if (!session) return res.status(401).send({ message: 'Session not informed' });try {
    let tokenDecrypt = '';
    let sessionDecrypt = '';

    try {
      sessionDecrypt = session.split(':')[0];
      tokenDecrypt = session.
      split(':')[1].
      replace(/_/g, '/').
      replace(/-/g, '+');
    } catch (error) {
      try {
        if (token && token !== '' && token.split(' ').length > 0) {
          const token_value = token.split(' ')[1];
          if (token_value)
          tokenDecrypt = token_value.replace(/_/g, '/').replace(/-/g, '+');else

          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        } else {
          return res.status(401).json({
            message: 'Token is not present. Check your header and try again'
          });
        }
      } catch (e) {
        req.logger.error(e);
        return res.status(401).json({
          error: 'Check that a Session and Token are correct',
          message: error
        });
      }
    }

    _bcrypt.default.compare(
      sessionDecrypt + secureToken,
      tokenDecrypt,
      function (err, result) {
        if (result) {
          req.session = formatSession(req.params.session);
          req.token = tokenDecrypt;
          req.client = _sessionUtil.clientsArray[req.session];
          next();
        } else {
          return res.
          status(401).
          json({ error: 'Check that the Session and Token are correct' });
        }
      }
    );
  } catch (error) {
    req.logger.error(error);
    return res.status(401).json({
      error: 'Check that the Session and Token are correct.',
      message: error
    });
  }
};var _default = exports.default =

verifyToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYmNyeXB0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfc2Vzc2lvblV0aWwiLCJmb3JtYXRTZXNzaW9uIiwic2Vzc2lvbiIsInNwbGl0IiwidmVyaWZ5VG9rZW4iLCJyZXEiLCJyZXMiLCJuZXh0Iiwic2VjdXJlVG9rZW4iLCJzZXJ2ZXJPcHRpb25zIiwic2VjcmV0S2V5IiwicGFyYW1zIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwiaGVhZGVycyIsInN0YXR1cyIsInNlbmQiLCJtZXNzYWdlIiwidG9rZW5EZWNyeXB0Iiwic2Vzc2lvbkRlY3J5cHQiLCJyZXBsYWNlIiwiZXJyb3IiLCJsZW5ndGgiLCJ0b2tlbl92YWx1ZSIsImpzb24iLCJlIiwibG9nZ2VyIiwiYmNyeXB0IiwiY29tcGFyZSIsImVyciIsInJlc3VsdCIsImNsaWVudCIsImNsaWVudHNBcnJheSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWlkZGxld2FyZS9hdXRoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAyMDIxIFdQUENvbm5lY3QgVGVhbVxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmltcG9ydCBiY3J5cHQgZnJvbSAnYmNyeXB0JztcclxuaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuaW1wb3J0IHsgY2xpZW50c0FycmF5IH0gZnJvbSAnLi4vdXRpbC9zZXNzaW9uVXRpbCc7XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRTZXNzaW9uKHNlc3Npb246IHN0cmluZykge1xyXG4gIHJldHVybiBzZXNzaW9uLnNwbGl0KCc6JylbMF07XHJcbn1cclxuXHJcbmNvbnN0IHZlcmlmeVRva2VuID0gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XHJcbiAgY29uc3Qgc2VjdXJlVG9rZW4gPSByZXEuc2VydmVyT3B0aW9ucy5zZWNyZXRLZXk7XHJcblxyXG4gIGNvbnN0IHsgc2Vzc2lvbiB9ID0gcmVxLnBhcmFtcztcclxuICBjb25zdCB7IGF1dGhvcml6YXRpb246IHRva2VuIH0gPSByZXEuaGVhZGVycztcclxuICBpZiAoIXNlc3Npb24pXHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLnNlbmQoeyBtZXNzYWdlOiAnU2Vzc2lvbiBub3QgaW5mb3JtZWQnIH0pO1xyXG5cclxuICB0cnkge1xyXG4gICAgbGV0IHRva2VuRGVjcnlwdCA9ICcnO1xyXG4gICAgbGV0IHNlc3Npb25EZWNyeXB0ID0gJyc7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgc2Vzc2lvbkRlY3J5cHQgPSBzZXNzaW9uLnNwbGl0KCc6JylbMF07XHJcbiAgICAgIHRva2VuRGVjcnlwdCA9IHNlc3Npb25cclxuICAgICAgICAuc3BsaXQoJzonKVsxXVxyXG4gICAgICAgIC5yZXBsYWNlKC9fL2csICcvJylcclxuICAgICAgICAucmVwbGFjZSgvLS9nLCAnKycpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4gIT09ICcnICYmIHRva2VuLnNwbGl0KCcgJykubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgY29uc3QgdG9rZW5fdmFsdWUgPSB0b2tlbi5zcGxpdCgnICcpWzFdO1xyXG4gICAgICAgICAgaWYgKHRva2VuX3ZhbHVlKVxyXG4gICAgICAgICAgICB0b2tlbkRlY3J5cHQgPSB0b2tlbl92YWx1ZS5yZXBsYWNlKC9fL2csICcvJykucmVwbGFjZSgvLS9nLCAnKycpO1xyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xyXG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpcyBub3QgcHJlc2VudC4gQ2hlY2sgeW91ciBoZWFkZXIgYW5kIHRyeSBhZ2FpbicsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xyXG4gICAgICAgICAgICBtZXNzYWdlOiAnVG9rZW4gaXMgbm90IHByZXNlbnQuIENoZWNrIHlvdXIgaGVhZGVyIGFuZCB0cnkgYWdhaW4nLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmVxLmxvZ2dlci5lcnJvcihlKTtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xyXG4gICAgICAgICAgZXJyb3I6ICdDaGVjayB0aGF0IGEgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QnLFxyXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3IsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBiY3J5cHQuY29tcGFyZShcclxuICAgICAgc2Vzc2lvbkRlY3J5cHQgKyBzZWN1cmVUb2tlbixcclxuICAgICAgdG9rZW5EZWNyeXB0LFxyXG4gICAgICBmdW5jdGlvbiAoZXJyLCByZXN1bHQpIHtcclxuICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICByZXEuc2Vzc2lvbiA9IGZvcm1hdFNlc3Npb24ocmVxLnBhcmFtcy5zZXNzaW9uKTtcclxuICAgICAgICAgIHJlcS50b2tlbiA9IHRva2VuRGVjcnlwdDtcclxuICAgICAgICAgIHJlcS5jbGllbnQgPSBjbGllbnRzQXJyYXlbcmVxLnNlc3Npb25dO1xyXG4gICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzXHJcbiAgICAgICAgICAgIC5zdGF0dXMoNDAxKVxyXG4gICAgICAgICAgICAuanNvbih7IGVycm9yOiAnQ2hlY2sgdGhhdCB0aGUgU2Vzc2lvbiBhbmQgVG9rZW4gYXJlIGNvcnJlY3QnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmVxLmxvZ2dlci5lcnJvcihlcnJvcik7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oe1xyXG4gICAgICBlcnJvcjogJ0NoZWNrIHRoYXQgdGhlIFNlc3Npb24gYW5kIFRva2VuIGFyZSBjb3JyZWN0LicsXHJcbiAgICAgIG1lc3NhZ2U6IGVycm9yLFxyXG4gICAgfSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdmVyaWZ5VG9rZW47XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7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