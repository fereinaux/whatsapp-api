"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.convert = convert;var _jsonMapperJson = _interopRequireDefault(require("json-mapper-json"));function _getRequireWildcardCache(e) {if ("function" != typeof WeakMap) return null;var r = new WeakMap(),t = new WeakMap();return (_getRequireWildcardCache = function (e) {return e ? t : r;})(e);}function _interopRequireWildcard(e, r) {if (!r && e && e.__esModule) return e;if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };var t = _getRequireWildcardCache(r);if (t && t.has(e)) return t.get(e);var n = { __proto__: null },a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];}return n.default = e, t && t.set(e, n), n;}

async function convert(prefix, data, event) {
  try {
    data.event = event || data.event;
    event = data.event.indexOf('message') >= 0 ? 'message' : data.event;

    const mappConfEvent = await config_event(prefix, event);
    const mappConfType = await config_type(prefix, event, data.type);

    Object.assign(mappConfEvent, mappConfType);

    // console.log('mappConfEvent', mappConfEvent);

    if (!mappConfEvent) return data;
    return await (0, _jsonMapperJson.default)(data, mappConfEvent);
  } catch (e) {
    return data;
  }
}

async function config_event(prefix, event) {
  try {
    const { default: mappConf } = await ((specifier) => new Promise((r) => r(specifier)).then((s) => _interopRequireWildcard(require(s))))(`./${prefix}${event}.js`);
    if (!mappConf) return undefined;
    return mappConf;
  } catch (e) {
    return undefined;
  }
}

async function config_type(prefix, event, type) {
  try {
    const { default: mappConf } = await ((specifier) => new Promise((r) => r(specifier)).then((s) => _interopRequireWildcard(require(s))))(
      `./${prefix}${event}-${type}.js`);

    if (!mappConf) return undefined;
    return mappConf;
  } catch (e) {
    return undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNvbk1hcHBlckpzb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsImUiLCJXZWFrTWFwIiwiciIsInQiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiY29udmVydCIsInByZWZpeCIsImRhdGEiLCJldmVudCIsImluZGV4T2YiLCJtYXBwQ29uZkV2ZW50IiwiY29uZmlnX2V2ZW50IiwibWFwcENvbmZUeXBlIiwiY29uZmlnX3R5cGUiLCJ0eXBlIiwiYXNzaWduIiwibWFwcGVyIiwibWFwcENvbmYiLCJzcGVjaWZpZXIiLCJQcm9taXNlIiwidGhlbiIsInMiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbWFwcGVyL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYXBwZXIgZnJvbSAnanNvbi1tYXBwZXItanNvbic7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY29udmVydChwcmVmaXg6IHN0cmluZywgZGF0YTogYW55LCBldmVudD86IGFueSkge1xyXG4gIHRyeSB7XHJcbiAgICBkYXRhLmV2ZW50ID0gZXZlbnQgfHwgZGF0YS5ldmVudDtcclxuICAgIGV2ZW50ID0gZGF0YS5ldmVudC5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCA/ICdtZXNzYWdlJyA6IGRhdGEuZXZlbnQ7XHJcblxyXG4gICAgY29uc3QgbWFwcENvbmZFdmVudCA9IGF3YWl0IGNvbmZpZ19ldmVudChwcmVmaXgsIGV2ZW50KTtcclxuICAgIGNvbnN0IG1hcHBDb25mVHlwZSA9IGF3YWl0IGNvbmZpZ190eXBlKHByZWZpeCwgZXZlbnQsIGRhdGEudHlwZSk7XHJcblxyXG4gICAgT2JqZWN0LmFzc2lnbihtYXBwQ29uZkV2ZW50LCBtYXBwQ29uZlR5cGUpO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdtYXBwQ29uZkV2ZW50JywgbWFwcENvbmZFdmVudCk7XHJcblxyXG4gICAgaWYgKCFtYXBwQ29uZkV2ZW50KSByZXR1cm4gZGF0YTtcclxuICAgIHJldHVybiBhd2FpdCBtYXBwZXIoZGF0YSwgbWFwcENvbmZFdmVudCk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjb25maWdfZXZlbnQocHJlZml4OiBhbnksIGV2ZW50OiBhbnkpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBkZWZhdWx0OiBtYXBwQ29uZiB9ID0gYXdhaXQgaW1wb3J0KGAuLyR7cHJlZml4fSR7ZXZlbnR9LmpzYCk7XHJcbiAgICBpZiAoIW1hcHBDb25mKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIG1hcHBDb25mO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBjb25maWdfdHlwZShwcmVmaXg6IGFueSwgZXZlbnQ6IGFueSwgdHlwZTogYW55KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgZGVmYXVsdDogbWFwcENvbmYgfSA9IGF3YWl0IGltcG9ydChcclxuICAgICAgYC4vJHtwcmVmaXh9JHtldmVudH0tJHt0eXBlfS5qc2BcclxuICAgICk7XHJcbiAgICBpZiAoIW1hcHBDb25mKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIG1hcHBDb25mO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6IjBMQUFBLElB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