"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.initServer = initServer;exports.logger = void 0;















var _wppconnect = require("@wppconnect-team/wppconnect");
var _cors = _interopRequireDefault(require("cors"));
var _express = _interopRequireDefault(require("express"));
var _expressQueryBoolean = _interopRequireDefault(require("express-query-boolean"));
var _http = require("http");
var _mergeDeep = _interopRequireDefault(require("merge-deep"));
var _process = _interopRequireDefault(require("process"));
var _socket = require("socket.io");

var _package = require("../package.json");
var _config = _interopRequireDefault(require("./config"));
var _index = require("./mapper/index");
var _routes = _interopRequireDefault(require("./routes"));
var _functions = require("./util/functions");




var _logger = require("./util/logger"); /*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ //require('dotenv').config();
const logger = exports.logger = (0, _logger.createLogger)(_config.default.log);function initServer(serverOptions) {if (typeof serverOptions !== 'object') {serverOptions = {};}serverOptions = (0, _mergeDeep.default)({}, _config.default, serverOptions);_wppconnect.defaultLogger.level = serverOptions.log.level;(0, _functions.setMaxListners)(serverOptions);
  const app = (0, _express.default)();
  const PORT = _process.default.env.PORT || serverOptions.port;

  app.use(
    (0, _cors.default)({
      origin: '*'
    })
  );
  app.use(_express.default.json({ limit: '50mb' }));
  app.use(_express.default.urlencoded({ limit: '50mb', extended: true }));
  app.use('/files', _express.default.static('WhatsAppImages'));
  app.use((0, _expressQueryBoolean.default)());

  if (_config.default?.aws_s3?.access_key_id && _config.default?.aws_s3?.secret_key) {
    _process.default.env['AWS_ACCESS_KEY_ID'] = _config.default.aws_s3.access_key_id;
    _process.default.env['AWS_SECRET_ACCESS_KEY'] = _config.default.aws_s3.secret_key;
  }

  // Add request options
  app.use((req, res, next) => {
    req.serverOptions = serverOptions;
    req.logger = logger;
    req.io = io;

    const oldSend = res.send;

    res.send = async function (data) {
      const content = req.headers['content-type'];
      if (content == 'application/json') {
        data = JSON.parse(data);
        if (!data.session) data.session = req.client ? req.client.session : '';
        if (data.mapper && req.serverOptions.mapper.enable) {
          data.response = await (0, _index.convert)(
            req.serverOptions.mapper.prefix,
            data.response,
            data.mapper
          );
          delete data.mapper;
        }
      }
      res.send = oldSend;
      return res.send(data);
    };
    next();
  });

  app.use(_routes.default);

  (0, _functions.createFolders)();
  const http = (0, _http.createServer)(app);
  const io = new _socket.Server(http, {
    cors: {
      origin: '*'
    }
  });

  io.on('connection', (sock) => {
    logger.info(`ID: ${sock.id} entrou`);

    sock.on('disconnect', () => {
      logger.info(`ID: ${sock.id} saiu`);
    });
  });

  http.listen(PORT, () => {
    logger.info(`Server is running on port: ${PORT}`);
    logger.info(
      `\x1b[31m Visit ${serverOptions.host}:${PORT}/api-docs for Swagger docs`
    );
    logger.info(`WPPConnect-Server version: ${_package.version}`);

    if (serverOptions.startAllSession) (0, _functions.startAllSessions)(serverOptions, logger);
  });

  if (_config.default.log.level === 'error' || _config.default.log.level === 'warn') {
    console.log(`\x1b[33m ======================================================
Attention:
Your configuration is configured to show only a few logs, before opening an issue, 
please set the log to 'silly', copy the log that shows the error and open your issue.
======================================================
`);
  }

  return {
    app,
    routes: _routes.default,
    logger
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,