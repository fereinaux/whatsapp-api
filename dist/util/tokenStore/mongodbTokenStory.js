"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _token = _interopRequireDefault(require("./model/token"));

class MongodbTokenStore {

  constructor(client) {
    this.client = client;
  }
  tokenStore = {
    getToken: async (sessionName) => {
      let result = await _token.default.findOne({ sessionName });
      if (result === null) return result;
      result = JSON.parse(JSON.stringify(result));
      result.config = JSON.parse(result.config);
      result.config.webhook = result.webhook;
      this.client.config = result.config;
      return result;
    },
    setToken: async (sessionName, tokenData) => {
      const token = new _token.default(tokenData);
      token.sessionName = sessionName;
      token.webhook = this.client.config.webhook;
      token.config = JSON.stringify(this.client.config);

      const tk = await _token.default.findOne({ sessionName });

      if (tk) {
        token._id = tk._id;
        return (await _token.default.updateOne({ _id: tk._id }, token)) ?
        true :
        false;
      } else {
        return (await token.save()) ? true : false;
      }
    },
    removeToken: async (sessionName) => {
      return (await _token.default.deleteOne({ sessionName })) ? true : false;
    },
    listTokens: async () => {
      const result = await _token.default.find();
      return result.map((m) => m.sessionName);
    }
  };
}var _default = exports.default =

MongodbTokenStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk1vbmdvZGJUb2tlblN0b3JlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJ0b2tlblN0b3JlIiwiZ2V0VG9rZW4iLCJzZXNzaW9uTmFtZSIsInJlc3VsdCIsIlRva2VuIiwiZmluZE9uZSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsImNvbmZpZyIsIndlYmhvb2siLCJzZXRUb2tlbiIsInRva2VuRGF0YSIsInRva2VuIiwidGsiLCJfaWQiLCJ1cGRhdGVPbmUiLCJzYXZlIiwicmVtb3ZlVG9rZW4iLCJkZWxldGVPbmUiLCJsaXN0VG9rZW5zIiwiZmluZCIsIm1hcCIsIm0iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvdG9rZW5TdG9yZS9tb25nb2RiVG9rZW5TdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9rZW4gZnJvbSAnLi9tb2RlbC90b2tlbic7XHJcblxyXG5jbGFzcyBNb25nb2RiVG9rZW5TdG9yZSB7XHJcbiAgZGVjbGFyZSBjbGllbnQ6IGFueTtcclxuICBjb25zdHJ1Y3RvcihjbGllbnQ6IGFueSkge1xyXG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XHJcbiAgfVxyXG4gIHRva2VuU3RvcmUgPSB7XHJcbiAgICBnZXRUb2tlbjogYXN5bmMgKHNlc3Npb25OYW1lOiBzdHJpbmcpID0+IHtcclxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IChUb2tlbiBhcyBhbnkpLmZpbmRPbmUoeyBzZXNzaW9uTmFtZSB9KTtcclxuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcclxuICAgICAgcmVzdWx0LmNvbmZpZyA9IEpTT04ucGFyc2UocmVzdWx0LmNvbmZpZyk7XHJcbiAgICAgIHJlc3VsdC5jb25maWcud2ViaG9vayA9IHJlc3VsdC53ZWJob29rO1xyXG4gICAgICB0aGlzLmNsaWVudC5jb25maWcgPSByZXN1bHQuY29uZmlnO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIHNldFRva2VuOiBhc3luYyAoc2Vzc2lvbk5hbWU6IGFueSwgdG9rZW5EYXRhOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgdG9rZW4gPSBuZXcgKFRva2VuIGFzIGFueSkodG9rZW5EYXRhKTtcclxuICAgICAgdG9rZW4uc2Vzc2lvbk5hbWUgPSBzZXNzaW9uTmFtZTtcclxuICAgICAgdG9rZW4ud2ViaG9vayA9IHRoaXMuY2xpZW50LmNvbmZpZy53ZWJob29rO1xyXG4gICAgICB0b2tlbi5jb25maWcgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmNsaWVudC5jb25maWcpO1xyXG5cclxuICAgICAgY29uc3QgdGsgPSBhd2FpdCAoVG9rZW4gYXMgYW55KS5maW5kT25lKHsgc2Vzc2lvbk5hbWUgfSk7XHJcblxyXG4gICAgICBpZiAodGspIHtcclxuICAgICAgICB0b2tlbi5faWQgPSB0ay5faWQ7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCAoVG9rZW4gYXMgYW55KS51cGRhdGVPbmUoeyBfaWQ6IHRrLl9pZCB9LCB0b2tlbikpXHJcbiAgICAgICAgICA/IHRydWVcclxuICAgICAgICAgIDogZmFsc2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIChhd2FpdCB0b2tlbi5zYXZlKCkpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlVG9rZW46IGFzeW5jIChzZXNzaW9uTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHJldHVybiAoYXdhaXQgKFRva2VuIGFzIGFueSkuZGVsZXRlT25lKHsgc2Vzc2lvbk5hbWUgfSkpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGxpc3RUb2tlbnM6IGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKFRva2VuIGFzIGFueSkuZmluZCgpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0Lm1hcCgobTogYW55KSA9PiBtLnNlc3Npb25OYW1lKTtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9uZ29kYlRva2VuU3RvcmU7XHJcbiJdLCJtYXBwaW5ncyI6InlMQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTs7QUFFQSxNQUFNQyxpQkFBaUIsQ0FBQzs7RUFFdEJDLFdBQVdBLENBQUNDLE1BQVcsRUFBRTtJQUN2QixJQUFJLENBQUNBLE1BQU0sR0FBR0EsTUFBTTtFQUN0QjtFQUNBQyxVQUFVLEdBQUc7SUFDWEMsUUFBUSxFQUFFLE1BQUFBLENBQU9DLFdBQW1CLEtBQUs7TUFDdkMsSUFBSUMsTUFBTSxHQUFHLE1BQU9DLGNBQUssQ0FBU0MsT0FBTyxDQUFDLEVBQUVILFdBQVcsQ0FBQyxDQUFDLENBQUM7TUFDMUQsSUFBSUMsTUFBTSxLQUFLLElBQUksRUFBRSxPQUFPQSxNQUFNO01BQ2xDQSxNQUFNLEdBQUdHLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLFNBQVMsQ0FBQ0wsTUFBTSxDQUFDLENBQUM7TUFDM0NBLE1BQU0sQ0FBQ00sTUFBTSxHQUFHSCxJQUFJLENBQUNDLEtBQUssQ0FBQ0osTUFBTSxDQUFDTSxNQUFNLENBQUM7TUFDekNOLE1BQU0sQ0FBQ00sTUFBTSxDQUFDQyxPQUFPLEdBQUdQLE1BQU0sQ0FBQ08sT0FBTztNQUN0QyxJQUFJLENBQUNYLE1BQU0sQ0FBQ1UsTUFBTSxHQUFHTixNQUFNLENBQUNNLE1BQU07TUFDbEMsT0FBT04sTUFBTTtJQUNmLENBQUM7SUFDRFEsUUFBUSxFQUFFLE1BQUFBLENBQU9ULFdBQWdCLEVBQUVVLFNBQWMsS0FBSztNQUNwRCxNQUFNQyxLQUFLLEdBQUcsSUFBS1QsY0FBSyxDQUFTUSxTQUFTLENBQUM7TUFDM0NDLEtBQUssQ0FBQ1gsV0FBVyxHQUFHQSxXQUFXO01BQy9CVyxLQUFLLENBQUNILE9BQU8sR0FBRyxJQUFJLENBQUNYLE1BQU0sQ0FBQ1UsTUFBTSxDQUFDQyxPQUFPO01BQzFDRyxLQUFLLENBQUNKLE1BQU0sR0FBR0gsSUFBSSxDQUFDRSxTQUFTLENBQUMsSUFBSSxDQUFDVCxNQUFNLENBQUNVLE1BQU0sQ0FBQzs7TUFFakQsTUFBTUssRUFBRSxHQUFHLE1BQU9WLGNBQUssQ0FBU0MsT0FBTyxDQUFDLEVBQUVILFdBQVcsQ0FBQyxDQUFDLENBQUM7O01BRXhELElBQUlZLEVBQUUsRUFBRTtRQUNORCxLQUFLLENBQUNFLEdBQUcsR0FBR0QsRUFBRSxDQUFDQyxHQUFHO1FBQ2xCLE9BQU8sQ0FBQyxNQUFPWCxjQUFLLENBQVNZLFNBQVMsQ0FBQyxFQUFFRCxHQUFHLEVBQUVELEVBQUUsQ0FBQ0MsR0FBRyxDQUFDLENBQUMsRUFBRUYsS0FBSyxDQUFDO1FBQzFELElBQUk7UUFDSixLQUFLO01BQ1gsQ0FBQyxNQUFNO1FBQ0wsT0FBTyxDQUFDLE1BQU1BLEtBQUssQ0FBQ0ksSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSztNQUM1QztJQUNGLENBQUM7SUFDREMsV0FBVyxFQUFFLE1BQUFBLENBQU9oQixXQUFtQixLQUFLO01BQzFDLE9BQU8sQ0FBQyxNQUFPRSxjQUFLLENBQVNlLFNBQVMsQ0FBQyxFQUFFakIsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxLQUFLO0lBQ3pFLENBQUM7SUFDRGtCLFVBQVUsRUFBRSxNQUFBQSxDQUFBLEtBQVk7TUFDdEIsTUFBTWpCLE1BQU0sR0FBRyxNQUFPQyxjQUFLLENBQVNpQixJQUFJLENBQUMsQ0FBQztNQUMxQyxPQUFPbEIsTUFBTSxDQUFDbUIsR0FBRyxDQUFDLENBQUNDLENBQU0sS0FBS0EsQ0FBQyxDQUFDckIsV0FBVyxDQUFDO0lBQzlDO0VBQ0YsQ0FBQztBQUNILENBQUMsSUFBQXNCLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBOztBQUVjN0IsaUJBQWlCIiwiaWdub3JlTGlzdCI6W119