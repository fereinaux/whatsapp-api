"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _config = _interopRequireDefault(require("../../config"));
var _db = _interopRequireDefault(require("../db/redis/db"));
var _functions = require("../functions");

class RedisTokenStore {


  constructor(client) {
    this.client = client;

    let prefix = _config.default.db.redisPrefix || '';
    if (prefix === 'docker') {
      prefix = (0, _functions.getIPAddress)();
    }
  }
  tokenStore = {
    getToken: (sessionName) =>
    new Promise((resolve, reject) => {
      _db.default.get(
        this.prefix + sessionName,
        (err, reply) => {
          if (err) {
            return reject(err);
          }
          const object = JSON.parse(reply);
          if (object) {
            if (object.config && Object.keys(this.client.config).length === 0)
            this.client.config = object.config;
            if (
            object.webhook &&
            Object.keys(this.client.config).length === 0)

            this.client.config.webhook = object.webhook;
          }
          resolve(object);
        }
      );
    }),
    setToken: (sessionName, tokenData) =>
    new Promise((resolve) => {
      tokenData.sessionName = sessionName;
      tokenData.config = this.client.config;
      _db.default.set(
        this.prefix + sessionName,
        JSON.stringify(tokenData),
        (err) => {
          return resolve(err ? false : true);
        }
      );
    }),
    removeToken: (sessionName) =>
    new Promise((resolve) => {
      _db.default.del(this.prefix + sessionName, (err) => {
        return resolve(err ? false : true);
      });
    }),
    listTokens: () =>
    new Promise((resolve) => {
      _db.default.keys(this.prefix + '*', (err, keys) => {
        if (err) {
          return resolve([]);
        }
        keys.forEach((item, indice) => {
          if (this.prefix !== '' && item.includes(this.prefix)) {
            keys[indice] = item.substring(
              item.indexOf(this.prefix) + this.prefix.length
            );
          }
        });
        return resolve(keys);
      });
    })
  };
}var _default = exports.default =

RedisTokenStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZGIiLCJfZnVuY3Rpb25zIiwiUmVkaXNUb2tlblN0b3JlIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJwcmVmaXgiLCJjb25maWciLCJkYiIsInJlZGlzUHJlZml4IiwiZ2V0SVBBZGRyZXNzIiwidG9rZW5TdG9yZSIsImdldFRva2VuIiwic2Vzc2lvbk5hbWUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlZGlzQ2xpZW50IiwiZ2V0IiwiZXJyIiwicmVwbHkiLCJvYmplY3QiLCJKU09OIiwicGFyc2UiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwid2ViaG9vayIsInNldFRva2VuIiwidG9rZW5EYXRhIiwic2V0Iiwic3RyaW5naWZ5IiwicmVtb3ZlVG9rZW4iLCJkZWwiLCJsaXN0VG9rZW5zIiwiZm9yRWFjaCIsIml0ZW0iLCJpbmRpY2UiLCJpbmNsdWRlcyIsInN1YnN0cmluZyIsImluZGV4T2YiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvdG9rZW5TdG9yZS9yZWRpc1Rva2VuU3RvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xyXG5pbXBvcnQgcmVkaXNDbGllbnQgZnJvbSAnLi4vZGIvcmVkaXMvZGInO1xyXG5pbXBvcnQgeyBnZXRJUEFkZHJlc3MgfSBmcm9tICcuLi9mdW5jdGlvbnMnO1xyXG5cclxuY2xhc3MgUmVkaXNUb2tlblN0b3JlIHtcclxuICBkZWNsYXJlIGNsaWVudDogYW55O1xyXG4gIGRlY2xhcmUgcHJlZml4OiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IoY2xpZW50OiBhbnkpIHtcclxuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xyXG5cclxuICAgIGxldCBwcmVmaXggPSBjb25maWcuZGIucmVkaXNQcmVmaXggfHwgJyc7XHJcbiAgICBpZiAocHJlZml4ID09PSAnZG9ja2VyJykge1xyXG4gICAgICBwcmVmaXggPSBnZXRJUEFkZHJlc3MoKTtcclxuICAgIH1cclxuICB9XHJcbiAgdG9rZW5TdG9yZSA9IHtcclxuICAgIGdldFRva2VuOiAoc2Vzc2lvbk5hbWU6IHN0cmluZykgPT5cclxuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIChyZWRpc0NsaWVudCBhcyBhbnkpLmdldChcclxuICAgICAgICAgIHRoaXMucHJlZml4ICsgc2Vzc2lvbk5hbWUsXHJcbiAgICAgICAgICAoZXJyOiBhbnksIHJlcGx5OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvYmplY3QgPSBKU09OLnBhcnNlKHJlcGx5KTtcclxuICAgICAgICAgICAgaWYgKG9iamVjdCkge1xyXG4gICAgICAgICAgICAgIGlmIChvYmplY3QuY29uZmlnICYmIE9iamVjdC5rZXlzKHRoaXMuY2xpZW50LmNvbmZpZykubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnQuY29uZmlnID0gb2JqZWN0LmNvbmZpZztcclxuICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBvYmplY3Qud2ViaG9vayAmJlxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5jbGllbnQuY29uZmlnKS5sZW5ndGggPT09IDBcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudC5jb25maWcud2ViaG9vayA9IG9iamVjdC53ZWJob29rO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUob2JqZWN0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICB9KSxcclxuICAgIHNldFRva2VuOiAoc2Vzc2lvbk5hbWU6IHN0cmluZywgdG9rZW5EYXRhOiBhbnkpID0+XHJcbiAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgdG9rZW5EYXRhLnNlc3Npb25OYW1lID0gc2Vzc2lvbk5hbWU7XHJcbiAgICAgICAgdG9rZW5EYXRhLmNvbmZpZyA9IHRoaXMuY2xpZW50LmNvbmZpZztcclxuICAgICAgICAocmVkaXNDbGllbnQgYXMgYW55KS5zZXQoXHJcbiAgICAgICAgICB0aGlzLnByZWZpeCArIHNlc3Npb25OYW1lLFxyXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkodG9rZW5EYXRhKSxcclxuICAgICAgICAgIChlcnI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShlcnIgPyBmYWxzZSA6IHRydWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pLFxyXG4gICAgcmVtb3ZlVG9rZW46IChzZXNzaW9uTmFtZTogc3RyaW5nKSA9PlxyXG4gICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIChyZWRpc0NsaWVudCBhcyBhbnkpLmRlbCh0aGlzLnByZWZpeCArIHNlc3Npb25OYW1lLCAoZXJyOiBhbnkpID0+IHtcclxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGVyciA/IGZhbHNlIDogdHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pLFxyXG4gICAgbGlzdFRva2VuczogKCkgPT5cclxuICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAocmVkaXNDbGllbnQgYXMgYW55KS5rZXlzKHRoaXMucHJlZml4ICsgJyonLCAoZXJyOiBhbnksIGtleXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShbXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBrZXlzLmZvckVhY2goKGl0ZW06IGFueSwgaW5kaWNlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJlZml4ICE9PSAnJyAmJiBpdGVtLmluY2x1ZGVzKHRoaXMucHJlZml4KSkge1xyXG4gICAgICAgICAgICAgIGtleXNbaW5kaWNlXSA9IGl0ZW0uc3Vic3RyaW5nKFxyXG4gICAgICAgICAgICAgICAgaXRlbS5pbmRleE9mKHRoaXMucHJlZml4KSArIHRoaXMucHJlZml4Lmxlbmd0aFxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoa2V5cyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pLFxyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlZGlzVG9rZW5TdG9yZTtcclxuIl0sIm1hcHBpbmdzIjoieUxBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsR0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBRixPQUFBOztBQUVBLE1BQU1HLGVBQWUsQ0FBQzs7O0VBR3BCQyxXQUFXQSxDQUFDQyxNQUFXLEVBQUU7SUFDdkIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBLE1BQU07O0lBRXBCLElBQUlDLE1BQU0sR0FBR0MsZUFBTSxDQUFDQyxFQUFFLENBQUNDLFdBQVcsSUFBSSxFQUFFO0lBQ3hDLElBQUlILE1BQU0sS0FBSyxRQUFRLEVBQUU7TUFDdkJBLE1BQU0sR0FBRyxJQUFBSSx1QkFBWSxFQUFDLENBQUM7SUFDekI7RUFDRjtFQUNBQyxVQUFVLEdBQUc7SUFDWEMsUUFBUSxFQUFFQSxDQUFDQyxXQUFtQjtJQUM1QixJQUFJQyxPQUFPLENBQUMsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEtBQUs7TUFDOUJDLFdBQVcsQ0FBU0MsR0FBRztRQUN0QixJQUFJLENBQUNaLE1B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