"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.backupSessions = backupSessions;exports.closeAllSessions = closeAllSessions;exports.restoreSessions = restoreSessions;















var _archiver = _interopRequireDefault(require("archiver"));

var _fs = _interopRequireDefault(require("fs"));
var _unzipper = _interopRequireDefault(require("unzipper"));

var _ = require("..");
var _config = _interopRequireDefault(require("../config"));
var _functions = require("./functions");
var _getAllTokens = _interopRequireDefault(require("./getAllTokens"));
var _sessionUtil = require("./sessionUtil"); /*
 * Copyright 2023 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function backupSessions(req) {// eslint-disable-next-line no-async-promise-executor
  return new Promise(async (resolve, reject) => {await closeAllSessions(req);const output = _fs.default.createWriteStream(__dirname + '/../backupSessions.zip');const archive = (0, _archiver.default)('zip', { zlib: { level: 9 } // Sets the compression level.
        });archive.on('error', function (err) {reject(err);req.logger.error(err);});archive.pipe(output);
      archive.directory(__dirname + '/../../tokens', 'tokens');
      _fs.default.cpSync(
        _config.default.customUserDataDir,
        __dirname + '/../../backupFolder',
        { force: true, recursive: true }
      );

      archive.directory(__dirname + '/../../backupFolder', 'userDataDir');
      archive.finalize();

      output.on('close', () => {
        _fs.default.rmSync(__dirname + '/../../backupFolder', { recursive: true });
        const myStream = _fs.default.createReadStream(
          __dirname + '/../backupSessions.zip'
        );
        myStream.pipe(req.res);
        myStream.on('end', () => {
          _.logger.info('Sessions successfully backuped. Restarting sessions...');
          (0, _functions.startAllSessions)(_config.default, _.logger);
          req.res?.end();
        });
        myStream.on('error', function (err) {
          console.log(err);
          reject(err);
        });
      });
    });
}

async function restoreSessions(
req,
file)
{
  if (!file?.mimetype?.includes('zip')) {
    throw new Error('Please, send zipped file');
  }
  const path = file.path;
  _.logger.info('Starting restore sessions...');
  await closeAllSessions(req);

  const extract = _fs.default.
  createReadStream(path).
  pipe(_unzipper.default.Extract({ path: './restore' }));
  extract.on('close', () => {
    try {
      _fs.default.cpSync(__dirname + '/../../restore/tokens', 'tokens', {
        force: true,
        recursive: true
      });
    } catch (error) {
      _.logger.info("Folder 'tokens' not found.");
    }
    try {
      _fs.default.cpSync(
        __dirname + '/../../restore/userDataDir',
        _config.default.customUserDataDir,
        {
          force: false,
          recursive: true
        }
      );
    } catch (error) {
      _.logger.info("Folder 'userDataDir' not found.");
    }
    _.logger.info('Sessions successfully restored. Starting...');
    (0, _functions.startAllSessions)(_config.default, _.logger);
  });

  return { success: true };
}

async function closeAllSessions(req) {
  const names = await (0, _getAllTokens.default)(req);
  names.forEach(async (session) => {
    const client = _sessionUtil.clientsArray[session];
    try {
      delete _sessionUtil.clientsArray[session];
      if (client?.status) {
        _.logger.info('Stopping session: ' + session);
        await client.page.browser().close();
      }
      delete _sessionUtil.clientsArray[session];
    } catch (error) {
      _.logger.error('Not was possible stop session: ' + session);
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,